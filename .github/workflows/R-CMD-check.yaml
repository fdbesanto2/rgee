on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.6', platform: windows-x86_64}
          - {os: macOS-latest, r: '3.6', platform: osx-x86_64-clang}
          - {os: ubuntu-latest, r: '3.5', platform: linux-x86_64-ubuntu-gcc}
          - {os: ubuntu-latest, r: '3.6', platform: linux-x86_64-ubuntu-gcc}
          - {os: ubuntu-latest, r: '4.0', platform: linux-x86_64-ubuntu-gcc}

    env:
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      # macOS >= 10.15.4 linking
      SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk

    steps:
      - name: CHECKOUT CODE
        uses: actions/checkout@v2

      - name: SETUP PYTHON
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: SETUP R
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - name: SETUP PANDOC
        uses: r-lib/actions/setup-pandoc@master

      - name: FIND ALL R PACKAGES DEPENDECIES OF RGEE
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: RETICULATE_PYTHON SETTING
        run: |
          reticulate_dir <- path.expand("~/.Renviron")
          fileConn <- file(reticulate_dir)
          pyPATH <- Sys.getenv("pythonLocation")
          writeLines(sprintf('RETICULATE_PYTHON="%s"', pyPATH), fileConn)
          close(fileConn)
        shell: Rscript {0}

      - name: DECRYPT rgee SECRETS
        run: ./.github/decrypt_secret.sh
        env:
          RGEE_SECRET_PASSPHRASE: ${{ secrets.RGEE_SECRET_PASSPHRASE }}


      - name: INSTALL SYSTEM DEPENDENCIES [LINUX]
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: ${{ matrix.config.platform }}
        run: |
          sudo apt update
          sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
          sudo apt install libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
          libv8-3.14-dev libjq-dev libnetcdf-dev libjson-c-dev


          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: INSTALL SYSTEM DEPENDENCIES [macOS]
        if: runner.os == 'macOS'
        env:
          RHUB_PLATFORM: ${{ matrix.config.platform }}
        run: |
          brew install udunits
          brew install gdal
          cat <<EOT >> .Renviron
          PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
          PROJ_LIB=/usr/local/opt/proj/share/proj/
          EOT
          cat <<EOT >> .Rprofile
          config_args <- c("sf" = "--with-proj-lib=/usr/local/lib/", "rgdal" = "--with-proj-lib=/usr/local/lib/ --with-proj-include=/usr/local/include/")
          r <- getOption("repos")
          r["CRAN"] <- "https://cran.rstudio.com"
          options(configure.args = config_args, repos = r)
          EOT
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: INSTALL PYTHON DEPENDENCIES
        run: |
          pip install --upgrade pip
          pip install setuptools oauth2client earthengine-api numpy virtualenv

      - name: CACHE R PACKAGES [LINUX and macOS]
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: PREBUILD TESTING
        run: |
          earthengine -h

      - name: INSTALL sfrgdal WITH CONFIGURE [macOS]
        if: runner.os == 'macOS'
        run: |
          install.packages("rgdal", type = "source", configure.args = "--with-proj-lib=/usr/local/lib/ --with-proj-include=/usr/local/include/")
        shell: Rscript {0}

      - name: INSTALL dependencies and rcmdcheck
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: CHECK
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-examples","--no-tests"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: UPLOAD CHECK RESULTS
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
